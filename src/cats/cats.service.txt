import { Injectable, NotFoundException } from '@nestjs/common';
import { CreateCatDto } from './dto/create-cat.dto';
import { UpdateCatDto } from './dto/update-cat.dto';
import { Cat } from './entities/cat.entity';
import { InjectRepository } from '@nestjs/typeorm';
import { DeleteResult, Repository, UpdateResult } from 'typeorm';

@Injectable()
export class CatsService<T> {
  constructor(
    @InjectRepository(Cat) private readonly catsRepository: Repository<T>,
  ) {}

  // private readonly cats: Cat[] = [];
  async create(createCatDto: CreateCatDto): Promise<T> {
    // this.cats.push({ id: '' + (this.cats.length + 1), ...createCatDto });
    return await this.catsRepository.save(createCatDto);
  }

  async findAll(): Promise<Cat[]> {
    // return this.cats;
    return await this.catsRepository.find();
  }

  async findOne(id: string): Promise<Cat> {
    // return this.cats.find((cat) => cat.id === id);
    const cat = await this.catsRepository.findOne({ where: { id: id } });
    if (cat) {
      throw new NotFoundException();
    }
    return cat;
  }

  async update(id: string, updateCatDto: UpdateCatDto): Promise<UpdateResult> {
    // const cat = this.findOne(id);
    // this.remove(id);
    // this.cats.push({ ...cat, ...updateCatDto });
    return await this.catsRepository.update(id, updateCatDto);
  }

  /*
  // remove - 주어진 엔티티를 지운다
  this.repository.remove(entity) 
  this.repository.softRemove(entity)

  // delete - 조건으로 지운다
  this.repository.delete({id: id}) 
  this.repository.softDelete({id: id})
  */
  async remove(id: string): Promise<DeleteResult> {
    // const restCats = this.cats.filter((cat) => cat.id !== id);
    // this.cats.length = 0;
    // this.cats.push(...restCats);

    // const cat = await this.findOne(id);
    // await this.catsRepository.remove(cat);

    return await this.catsRepository.delete(id);
  }
}
